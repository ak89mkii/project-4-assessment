{"version":3,"sources":["components/Circle/Circle.jsx","components/Button/Button.jsx","App.js","serviceWorker.js","index.js"],"names":["Circle","props","className","ballNo","map","element","idx","ballIdx","onClick","handleSummon","height","src","alt","Button","App","state","setState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qTAuBeA,G,YAnBA,SAACC,GACZ,OACI,yBAAKC,UAAU,WACVD,EAAME,OAAOC,KAAI,SAACC,EAASC,GAAV,OAClB,yBAEAJ,UAAWD,EAAMM,UAAYD,EAAM,WAAa,GAChDE,QAAS,kBAAMP,EAAMQ,aAAaH,KAEjCL,EAAMM,UAAYD,EAAM,yBAAKJ,UAAU,MACpCQ,OAAO,KAAIC,IAAI,MAAMC,IAAI,KAAQ,yBAAKV,UAAU,QAChDQ,OAAO,OAPX,IAOsBJ,EAAM,SCOzBO,G,MAnBA,SAACZ,GACZ,OAEI,yBAAKC,UAAU,kBAEVD,EAAME,OAAOC,KAAI,SAACC,EAASC,GAAV,OACd,4BAEIJ,UAAWD,EAAMM,UAAYD,EAAM,WAAa,GAChDE,QAAS,kBAAMP,EAAMQ,aAAaH,KAEjCL,EAAMM,UAAYD,EAAM,yBACrBI,OAAO,KAAIC,IAAI,4DAA4DC,IAAI,aADlF,YALL,IAMsHN,EAAM,SCVtIH,EAAS,CAAC,IAAK,IAAK,IAAK,KAyChBW,E,4MAtCbC,MAAO,CACLR,QAAS,G,EAEXE,aAAe,SAACH,GACd,EAAKU,SAAS,CAAET,QAASD,K,uDAGvB,OACE,yBAAKJ,UAAU,OACb,4BAAQA,UAAU,cAAlB,kBAEA,6BACA,6BACA,yBACEQ,OAAO,MACPC,IAAI,+EACJC,IAAI,UAGN,8BACE,kBAAC,EAAD,CACAT,OAAQA,EACRI,QAASU,KAAKF,MAAMR,QACpBE,aAAcQ,KAAKR,eAEnB,kBAAC,EAAD,CACAN,OAAQA,EACRI,QAASU,KAAKF,MAAMR,QACpBE,aAAcQ,KAAKR,qB,GA7BbS,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4e42459d.chunk.js","sourcesContent":["import React from 'react'\nimport './Circle.css'\n\n\nconst Circle = (props) => {\n    return (\n        <div className='Circles'>\n            {props.ballNo.map((element, idx) =>\n            <div\n                    \n            className={props.ballIdx === idx ? 'selected' : ''}\n            onClick={() => props.handleSummon(idx)}\n        >\n            {props.ballIdx === idx ? <div className=\"AHA\"\n                height='40'src='div' alt='' /> : <div className=\"AHA02\"\n                height='40' /> } {idx + 1}\n        </div>\n            \n            )}\n        </div>\n    )\n}\n\nexport default Circle\n\n{/* <img \n            height='100'\n            src={props.ballIdx === idx ? 'https://vignette.wikia.nocookie.net/streetfighter/images/0/04/Ken_Defeated_Icon.png/revision/latest/top-crop/width/220/height/220?cb=20181207200802' : {idx}} \n            alt=\"none\"\n            onClick={() => props.handleSummon(idx)}\n            className=\"AHA02\"\n                height='40'src='div' alt=''\n            /> */}","import React from 'react'\nimport './Button.css'\n\nconst Button = (props) => {\n    return (\n        \n        <div className='CircleSelector'>\n            \n            {props.ballNo.map((element, idx) =>\n                <button\n                    \n                    className={props.ballIdx === idx ? 'selected' : ''}\n                    onClick={() => props.handleSummon(idx)}\n                >\n                    {props.ballIdx === idx ? <img \n                        height='60'src='https://media0.giphy.com/media/3oEjI6SIIHBdRxXI40/200.gif' alt='Hadouken' /> : `Push for ` } {idx + 1}\n                </button>\n            )}\n        </div>\n    )\n}\n\nexport default Button","import React, { Component } from 'react'\nimport './App.css';\nimport Circle from './components/Circle/Circle'\nimport Button from './components/Button/Button'\n\nconst ballNo = ['0', '1', '2', '3']\n\nclass App extends Component {\n  state ={\n    ballIdx: 0\n  }\n  handleSummon = (idx) => {\n    this.setState({ ballIdx: idx })\n  }\n    render() {\n      return (\n        <div className='App'>\n          <header className=\"App-header\">\n          Dragon Ball Z!!\n          <br></br>\n          <br></br>\n          <img \n            height='400'\n            src='https://i.pinimg.com/originals/25/ca/a1/25caa13756952660b740f4ad8660e21f.gif'\n            alt=\"none\" \n          />\n          </header>\n          <main>\n            <Button \n            ballNo={ballNo}\n            ballIdx={this.state.ballIdx}\n            handleSummon={this.handleSummon}\n            />\n            <Circle\n            ballNo={ballNo}\n            ballIdx={this.state.ballIdx}\n            handleSummon={this.handleSummon} \n            />\n          </main>\n        </div>\n      )\n    }\n  }\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}